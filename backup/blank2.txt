
class errorHandler( BaseException ):
    def __init__( self, code, message = None, title = None, action = None ):
        self.code = code
        if( message != None and title != None ):
            self.message = message
            self.title = title
            self.action = action
        else:
            self.title, self.message, self.action = self.getErrorCodeDetails( code )

    def __str__( self ):
        print( "errorHandler->__STR__" )
        #return self.message
        return self.respond( request.accept_mimetypes, self.code, self.title, self.message , self.action )

    def getCode( self ):
        return self.code

    def to_dict(self):
        rv = dict( self.code or ())
        rv[ 'message' ] = self.message
        return rv

    def respondSimple( self, code ):
        tmp = self.respond( request.accept_mimetypes, self.code, self.title, self.message , self.action )
        return tmp

    def getErrorCodeDetails( self, code ):
        if( code == 400 ):
            return "Bad Request", "The request could not be understood by the server due to malformed syntax.", None
        elif( code == 401 ):
            return "Unauthorized", "The request requires user authentication.", None
        elif( code == 402 ):
            return "Payment Required", "", None
        elif( code == 403 ):
            return "Forbidden", "The server understood the request, but is refusing to fulfill it. ", None
        elif( code == 404 ):
            return "Not Found", "The server has not found anything matching the Request-URI.", None
        elif( code == 405 ):
            return "Method Not Allowed", "The method specified in the Request-Line is not allowed for the resource identified by the Request-URI.", None
        elif( code == 406 ):
            return "Not Acceptable", "The resource identified by the request is only capable of generating response entities which have content characteristics not acceptable according to the accept headers sent in the request.", None
        elif( code == 407 ):
            return "Proxy Authentication Required", "The client must first authenticate itself with the proxy.", None
        elif( code == 408 ):
            return "Request Timeout", "The client did not produce a request within the time that the server was prepared to wait.", None
        elif( code == 409 ):
            return "Conflict", "The request could not be completed due to a conflict with the current state of the resource.", None
        elif( code == 410 ):
            return "Gone", "The requested resource is no longer available at the server and no forwarding address is known.", None
        elif( code == 411 ):
            return "Length Required", "The server refuses to accept the request without a defined Content- Length.", None
        elif( code == 412 ):
            return "Precondition Failed", "The precondition given in one or more of the request-header fields evaluated to false when it was tested on the server. ", None
        elif( code == 413 ):
            return "Request Entity Too Large", "The server is refusing to process a request because the request entity is larger than the server is willing or able to process.", None
        elif( code == 414 ):
            return "Request-URI Too Long", "The server is refusing to service the request because the Request-URI is longer than the server is willing to interpret.", None
        elif( code == 415 ):
            return "Unsupported Media Type", "The server is refusing to service the request because the entity of the request is in a format not supported by the requested resource for the requested method.", None
        elif( code == 416 ):
            return "Requested Range Not Satisfiable", "", None
        elif( code == 417 ):
            return "Expectation Failed", "The expectation given in an Expect request-header field (see section 14.20) could not be met by this server, or, if the server is a proxy, the server has unambiguous evidence that the request could not be met by the next-hop server.", None
        elif( code == 500 ):
            return "Internal Server Error", "The server encountered an unexpected condition which prevented it from fulfilling the request.", None
        elif( code == 501 ):
            return "Not Implemented", "The server does not support the functionality required to fulfill the request. This is the appropriate response when the server does not recognize the request method and is not capable of supporting it for any resource.", None
        elif( code == 502 ):
            return "Bad Gateway", "The server, while acting as a gateway or proxy, received an invalid response from the upstream server it accessed in attempting to fulfill the request.", None
        elif( code == 503 ):
            return "Service Unavailable", "The server is currently unable to handle the request due to a temporary overloading or maintenance of the server.", None
        elif( code == 504 ):
            return "Gateway Timeout", "The server, while acting as a gateway or proxy, did not receive a timely response from the upstream server specified by the URI (e.g. HTTP, FTP, LDAP) or some other auxiliary server (e.g. DNS) it needed to access in attempting to complete the request.", None
        elif( code == 505 ):
            return "HTTP Version Not Supported", "The server does not support, or refuses to support, the HTTP protocol version that was used in the request message.", None
        else:
            return None, None, None

    def respond( self, typer, status_code, sub_code, message, action  ):
        response = ""
        if "text/html" in typer:
            print( "ERRORHANDLER->RESPOND->HTML" )
            response = "<html>%s<br>%s<br>%s<br>%s</html>" % ( status_code, sub_code, message, action )
        elif "application/json" in typer:
            print( "ERRORHANDLER->RESPOND->JSON" )
            response = jsonify({ 'status' : status_code, 'sub_code' : sub_code, 'message' : message, 'action' : action })
        elif "application/xml" in typer:
            print( "ERRORHANDLER->RESPOND->XML" )
            response = '<?xml version="1.0" encoding="utf-8"?><response><status>%s</status><subcode>%s</subcode><message>%s</message><action>%s</action></response>' % ( status_code, sub_code, message, action )
        else:
            print( "AN UNKNOWN RESPONSE TYPE WAS REQUESTED" )

        return response
