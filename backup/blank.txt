__APICODENAME__   = "Aula"
__APIVERSION__    = "v0.5"


@app.errorhandler(ErrorHandler)
def bad_request(error):
    response = jsonify( error.to_dict() )
    response.status_code = error.status_code
    return response

@app.errorhandler(404)
def notFound( e ):
    print( "E = " + str( e ))

for error in (401, 404, 500): # or with other http code you consider as error
    app.error_handler_spec[None][error] = notFound


@app.errorhandler( Exception )
def generic_error_handler( error ):
    code = None
    description = None
    name = None
    title = None

    print( type( error ))

    if( type( error ) is not dict ):
        code = error[ "code" ]
        description = error[ "description" ]
        name = error[ "name" ]
        title = "Error %d %s" % ( code, name )
    else:
        code = error.code
        description = error.description
        name = error.name
        title = "Error %d %s" % ( code, name )

    view = {
        "code": code,
        "description": description,
        "name": name,
        "page_title": title,
    }
    try:
        return render_template( "errors/%d.html" % error.code, **view), error.code
    except:
        return render_template( "errors/generic.html", **view ), error.code



import time
import random, string
from flask import Flask, url_for, request, redirect, render_template, flash, make_response, session, g, abort

globalUserid = None
def create_app( configName ):
	app = Flask( __name__ )
	app.config.from_object( config[ configName ])
	config[ configName ].init_app( app )


@app.route( "/index" )
def index():
    return request.headers.get( 'User-Agent' )

@app.route( "/404" )
def missingFile():
    abort( 404 )
    return "MISSING FILE"

@app.route( "/getusernameroute" )
def getUsernameRoute():
    return url_for( "helloUser", username="roporter" )

@app.route( "/login", methods = [ 'GET', 'POST' ])
def login():
    error = None
    app.logger.warning( "No token found: Display login screen" )
    if request.method == "POST":
        if valid_login(
            request.form.get( "username" ),
            request.form.get( "password" )
        ):
            flash( "Successfully logged in" )
            session[ "username" ] = request.form.get( "username" )
            return redirect( url_for( "welcome" ))
        else:
            error = "Incorrect username and password"
            app.logger.warning( "Incorrect username and password! (%s)" % request.form.get( "username" ))
    return render_template( 'login.html', error=error )

@app.route( "/logout" )
def logout():
    global globalUserid
    #oldAuth = app.config[ "redis_store" ].get( "auths", globalUserid ).decode( encoding = 'UTF-8' )
    oldAuth = session[ "auth" ]
    session.pop( "auth", None )
    newAuth = randomStringGenerator( 32 )
    app.config[ "redis_store" ].hset( "auths", newAuth, str( globalUserid ));
    app.config[ "redis_store" ].hdel( "auths", oldAuth );
    app.config[ "redis_store" ].hdel( "loggedin", globalUserid );
    app.config[ "redis_store" ].hset( "user:" + str( globalUserid ), "auth", newAuth );
    return redirect( url_for( "login" ))

@app.route( "/dummy" )
def dummyData():
    username = "roporter"
    password = "cr0wellMEWS"
    authSecret = randomStringGenerator( 32 )
    apiKey1 = randomStringGenerator( 64 )
    userid = app.config[ "redis_store" ].incr( "next_user_id" );
    app.config[ "redis_store" ].hset( "users", username, userid )
    data = { "username" : username, "password" : password, "email" : "roporter@cisco.com", "auth" : authSecret, "api" : apiKey1, "flags" : "a", "rTime" : float( time.time())}
    app.config[ "redis_store" ].hmset( "user:" + str( userid ), data );
    app.config[ "redis_store" ].hset( "auths", authSecret, str( userid ));
    app.config[ "redis_store" ].hset( "apis", apiKey1, str( userid ));
    app.config[ "redis_store" ].zadd( "users_by_time", username, float( time.time()) );
    return "New user saved to DB"

@app.route( "/" )
def welcome():
    global globalUsername
    if 'auth' in session:
        app.logger.debug( "Auth is present in the session: Proceeding as user logged in" )
        authCookie = session[ "auth" ]
        userid = app.config[ "redis_store" ].hget( "auths", authCookie ).decode( encoding = 'UTF-8' )
        if userid != None:
            if( app.config[ "redis_store" ].hget( "user:" + str( userid ), "auth" ).decode( encoding = 'UTF-8' ) != authCookie ):
                app.logger.debug( "Session token was not equal to user token: Loading login screen" )
                return redirect( url_for( "login" ))
            else:
                loadUserInfo( userid )
                app.logger.debug( "Login was successful: Loading welcome screen" )
                return render_template( "welcome.html", username = str( globalUsername ))
        else:
            app.logger.debug( "Userid query resulted in None: Loading login screen" )
            return redirect( url_for( "login" ))
    else:
        app.logger.debug( "Auth was not in session state: Loading login screen" )
        return redirect( url_for( "login" ))

def loadUserInfo( userid ):
    global globalUserid, globalUsername
    globalUserid = userid
    globalUsername = app.config[ "redis_store" ].hget( "user:" + str( userid ), "username" ).decode( encoding = 'UTF-8' )
    print( "USERID: " + userid )
    print( "USERNAME: " + globalUsername )

def randomStringGenerator( length ):
    return ''.join( random.SystemRandom().choice( string.ascii_uppercase + string.digits ) for _ in range( length ))

def valid_login( username, password ):
    userid = app.config[ "redis_store" ].hget( "users", username )
    app.logger.debug( "UserID returned from DB query: " + str( userid ))

    if( userid == None ):
        app.logger.debug( "UserID returned from DB query was None" )
        return False
    else:
        if( not isinstance( userid, int )):
            userid = userid.decode( encoding = 'UTF-8' )

    pwd = app.config[ "redis_store" ].hget( "user:" + str( userid ).strip(), "password" )
    if( pwd == None ):
        app.logger.debug( "Password returned from DB Query was None" )
        return False
    else:
        if( app.config[ "redis_store" ].hget( "user:" + str( userid ), "password" ).decode( encoding = 'UTF-8' ) != password ):
            app.logger.debug( "Password entered does not match users password" )
            return False
        else:
            app.logger.debug( "User has logged in successfully!" )
            app.config[ "redis_store" ].hset( "loggedin", str( userid ), float( time.time()));
            session[ "auth" ] = app.config[ "redis_store" ].hget( "user:" + str( userid ), "auth" ).decode( encoding = 'UTF-8' )
            return True

@app.route( "/user/<username>" )
def helloUser( username ):
    return "Hello %s, what a wonderful day!" % ( username )

@app.route( "/post/<int:post_id>" )
def postUser( post_id ):
    return "Post: %d" % post_id

@app.before_first_request
def before_first_request():
    print( "BEFORE_FIRST_REQUEST" )

@app.before_request
def before_request():
    print( "BEFORE_REQUEST" )

#@app.after_request
#def after_request( response ):
#    print( "AFTER_REQUEST" )

@app.teardown_request
def teardown_request( exc ):
    print( "TEARDOWN_REQUEST" )


    from flask import jsonify, request
    from app.classes import switch

    class errorHandler( BaseException ):
        def __init__(self, m):
            self.message = m

        def __str__(self):
            return self.message

        def make_error( status_code, sub_code, message, action ):
            response = jsonify({
                'status': status_code,
                'sub_code': sub_code,
                'message': message,
                'action': action
            })
            response.status_code = status_code
            return response

        @staticmethod
        def respondSimple( code ):
            title, message, action = errorHandler.getErrorCodeDetails( code )
            tmp = errorHandler.respond( request.accept_mimetypes, code, title, message , action )
            return tmp

        @staticmethod
        def getErrorCodeDetails( code ):
            if( code == 400 ):
                return "Bad Request", "The request could not be understood by the server due to malformed syntax.", None
            elif( code == 401 ):
                return "Unauthorized", "The request requires user authentication.", None
            elif( code == 402 ):
                return "Payment Required", "", None
            elif( code == 403 ):
                return "Forbidden", "The server understood the request, but is refusing to fulfill it. ", None
            elif( code == 404 ):
                return "Not Found", "The server has not found anything matching the Request-URI.", None
            elif( code == 405 ):
                return "Method Not Allowed", "The method specified in the Request-Line is not allowed for the resource identified by the Request-URI.", None
            elif( code == 406 ):
                return "Not Acceptable", "The resource identified by the request is only capable of generating response entities which have content characteristics not acceptable according to the accept headers sent in the request.", None
            elif( code == 407 ):
                return "Proxy Authentication Required", "The client must first authenticate itself with the proxy.", None
            elif( code == 408 ):
                return "Request Timeout", "The client did not produce a request within the time that the server was prepared to wait.", None
            elif( code == 409 ):
                return "Conflict", "The request could not be completed due to a conflict with the current state of the resource.", None
            elif( code == 410 ):
                return "Gone", "The requested resource is no longer available at the server and no forwarding address is known.", None
            elif( code == 411 ):
                return "Length Required", "The server refuses to accept the request without a defined Content- Length.", None
            elif( code == 412 ):
                return "Precondition Failed", "The precondition given in one or more of the request-header fields evaluated to false when it was tested on the server. ", None
            elif( code == 413 ):
                return "Request Entity Too Large", "The server is refusing to process a request because the request entity is larger than the server is willing or able to process.", None
            elif( code == 414 ):
                return "Request-URI Too Long", "The server is refusing to service the request because the Request-URI is longer than the server is willing to interpret.", None
            elif( code == 415 ):
                return "Unsupported Media Type", "The server is refusing to service the request because the entity of the request is in a format not supported by the requested resource for the requested method.", None
            elif( code == 416 ):
                return "Requested Range Not Satisfiable", "", None
            elif( code == 417 ):
                return "Expectation Failed", "The expectation given in an Expect request-header field (see section 14.20) could not be met by this server, or, if the server is a proxy, the server has unambiguous evidence that the request could not be met by the next-hop server.", None
            elif( code == 500 ):
                return "Internal Server Error", "The server encountered an unexpected condition which prevented it from fulfilling the request.", None
            elif( code == 501 ):
                return "Not Implemented", "The server does not support the functionality required to fulfill the request. This is the appropriate response when the server does not recognize the request method and is not capable of supporting it for any resource.", None
            elif( code == 502 ):
                return "Bad Gateway", "The server, while acting as a gateway or proxy, received an invalid response from the upstream server it accessed in attempting to fulfill the request.", None
            elif( code == 503 ):
                return "Service Unavailable", "The server is currently unable to handle the request due to a temporary overloading or maintenance of the server.", None
            elif( code == 504 ):
                return "Gateway Timeout", "The server, while acting as a gateway or proxy, did not receive a timely response from the upstream server specified by the URI (e.g. HTTP, FTP, LDAP) or some other auxiliary server (e.g. DNS) it needed to access in attempting to complete the request.", None
            elif( code == 505 ):
                return "HTTP Version Not Supported", "The server does not support, or refuses to support, the HTTP protocol version that was used in the request message.", None
            else:
                return None, None, None

        @staticmethod
        def respond( typer, status_code, sub_code, message, action  ):
            response = ""
            if "text/html" in typer:
                print( "ERRORHANDLER->RESPOND->HTML" )
                response = "<html>%s<br>%s<br>%s<br>%s</html>" % ( status_code, sub_code, message, action )
            elif "application/json" in typer:
                print( "ERRORHANDLER->RESPOND->JSON" )
                response = jsonify({ 'status' : status_code, 'sub_code' : sub_code, 'message' : message, 'action' : action })
            elif "application/xml" in typer:
                print( "ERRORHANDLER->RESPOND->XML" )
                response = '<?xml version="1.0" encoding="utf-8"?><response><status>%s</status><subcode>%s</subcode><message>%s</message><action>%s</action></response>' % ( status_code, sub_code, message, action )
            else:
                print( "AN UNKNOWN REPONSE TYPE WAS REQUESTED" )

            return response
